<?php

/**
 * @file
 * Defines all basic API functions for ActiveCampaign.
 */
 
/**
 * Define default path exclusion list to remove tracking from admin pages,
 */
define('ACTIVECAMPAIGN_PAGES', "admin\nadmin/*\nbatch\nnode/add*\nnode/*/*\nuser/*/*");

/**
 * Implements hook_libraries_info().
 */
function activecampaign_libraries_info() {
  $libraries['activecampaign-api-php'] = [
    'name' => 'ActiveCampaign API',
    'vendor url' => 'https://github.com/ActiveCampaign/activecampaign-api-php',
    'download url' => 'https://github.com/ActiveCampaign/activecampaign-api-php/releases/tag/v2.0.1',
    'version' => '2.0.1',
    'files' => [
      'php' => ['includes/ActiveCampaign.class.php'],
    ],
  ];

  return $libraries;
}

/**
 * Implements hook_menu().
 */
function activecampaign_menu() {
  $items['admin/config/services/activecampaign'] = array(
    'title' => 'ActiveCampaign',
    'description' => 'ActiveCampaign Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['activecampaign_configuration_form'],
    'file' => 'includes/activecampaign_configuration.form.inc',
    'access arguments' => ['administer activecampaign'],
    'type' => MENU_NORMAL_ITEM,
  );

  // ActiveCampaign Configuration Form
  $items['admin/config/services/activecampaign/configuration'] = array(
    'title' => 'Configuration',
    'weight' => -10,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  // ActiveCampaign Field Mapping Form
  $items['admin/config/services/activecampaign/fields'] = array(
    'title' => 'Field Mapping',
    'description' => 'ActiveCampaign Field Mapping',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['activecampaign_fields_form'],
    'file' => 'includes/activecampaign_fields.form.inc',
    'access arguments' => ['administer activecampaign'],
    'type' => MENU_LOCAL_TASK,
  );

  // ActiveCampaign User Profile
  $items['user/%/activecampaign'] = array(
    'title' => 'ActiveCampaign',
    'description' => 'ActiveCampaign Profile',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('activecampaign_profile_view_form', 1),
    'file' => 'includes/activecampaign_profile.page.inc',
    'access arguments' => ['view activecampaign profile'],
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function activecampaign_permission() {
  return array(
    'administer activecampaign' => array(
      'title' => t('Administer ActiveCampaign'),
      'description' => t('Allows access to ActiveCampaign configuration.'),
    ),
    'view activecampaign profile' => array(
      'title' => t('View ActiveCampaign Profile'),
      'description' => t('Allows access to view ActiveCampaign contact data on user profiles.')
    )
  );
}

/**
 * Implements hook_page_alter() to insert JavaScript tracking code to the appropriate scope/region of the page.
 */
function activecampaign_page_alter(&$page) {
  global $user;
  $script = variable_get('activecampaign_tracking_code');
  if ($script) {
    if (_activecampaign_visibility_pages() && _activecampaign_visibility_user($user)) {
      drupal_add_js($script, array('scope' => 'footer', 'type' => 'inline', 'requires_jquery' => FALSE));
	}
  }
}

/**
 * Based on visibility setting this function returns TRUE if ActiveCampaign code should
 * be added to the current page and otherwise FALSE.
 */
function _activecampaign_visibility_pages() {
  static $page_match;

  // Cache visibility result if function is called more than once.
  if (!isset($page_match)) {

    $visibility = variable_get('activecampaign_visibility_pages', 0);
    $setting_pages = variable_get('activecampaign_pages', ACTIVECAMPAIGN_PAGES);

    // Match path if necessary.
    if (!empty($setting_pages)) {
      // Convert path to lowercase. This allows comparison of the same path
      // with different case. Ex: /Page, /page, /PAGE.
      $pages = drupal_strtolower($setting_pages);
      if ($visibility < 2) {
        // Convert the Drupal path to lowercase
        $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
        // Compare the lowercase internal and lowercase path alias (if any).
        $page_match = drupal_match_path($path, $pages);
        if ($path != $_GET['q']) {
          $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
        }
        // When $visibility has a value of 0, the tracking code is displayed on
        // all pages except those listed in $pages. When set to 1, it
        // is displayed only on those pages listed in $pages.
        $page_match = !($visibility xor $page_match);
      }
      elseif (module_exists('php')) {
        $page_match = php_eval($setting_pages);
      }
      else {
        $page_match = FALSE;
      }
    }
    else {
      $page_match = TRUE;
    }

  }
  return $page_match;
}

/**
 * Tracking visibility check for an user object.
 *
 * @param $account
 *   A user object containing an array of roles to check.
 * @return boolean
 *   A decision on if the current user is being tracked by Google Analytics.
 */
function _activecampaign_visibility_user($account) {

  $enabled = FALSE;

  // Is current user a member of a role that should be tracked?
  if (_activecampaign_visibility_header($account) && _activecampaign_visibility_roles($account)) {

    // Use the user's block visibility setting, if necessary.
    if (($custom = variable_get('activecampaign_custom', 0)) != 0) {
      if ($account->uid && isset($account->data['activecampaign']['custom'])) {
        $enabled = $account->data['activecampaign']['custom'];
      }
      else {
        $enabled = ($custom == 1);
      }
    }
    else {
      $enabled = TRUE;
    }

  }

  return $enabled;
}

/**
 * Based on visibility setting this function returns TRUE if ActiveCampaign code should
 * be added for the current role and otherwise FALSE.
 */
function _activecampaign_visibility_roles($account) {

  $visibility = variable_get('activecampaign_visibility_roles', 0);
  $enabled = $visibility;
  $roles = variable_get('activecampaign_roles', array());

  if (array_sum($roles) > 0) {
    // One or more roles are selected.
    foreach (array_keys($account->roles) as $rid) {
      // Is the current user a member of one of these roles?
      if (isset($roles[$rid]) && $rid == $roles[$rid]) {
        // Current user is a member of a role that should be tracked/excluded from tracking.
        $enabled = !$visibility;
        break;
      }
    }
  }
  else {
    // No role is selected for tracking, therefore all roles should be tracked.
    $enabled = TRUE;
  }

  return $enabled;
}

/**
 * Based on headers send by clients this function returns TRUE if tracking code should
 * be added to the current page and otherwise FALSE.
 */
function _activecampaign_visibility_header($account) {

  if (($account->uid || variable_get('cache', 0) == 0) && !empty($_SERVER['HTTP_DNT'])) {
    // Disable tracking if caching is disabled.
    return FALSE;
  }

  return TRUE;
}

/**
 * Helper function to get an API client.
 *
 * @return ActiveCampaign
 */
function activecampaign_get_client() {
  
  // Include the library class.
  require_once libraries_get_path('activecampaign') . '/includes/ActiveCampaign.class.php';

  $activecampaign_client = &drupal_static(__FUNCTION__);

  if (!isset($activecampaign_client)) {
    $activecampaign_client = new ActiveCampaign(variable_get('activecampaign_api_url'), variable_get('activecampaign_api_key'));
  }

  return $activecampaign_client;
}

/**
 * ActiveCampaign Check Settings
 *
 * This function will check to see if ActiveCampaign has been configured correctly.
 *
 * @return boolean
 *   TRUE if module has been configured, FALSE if not.
 */
function activecampaign_check_settings() {
  if (variable_get('activecampaign_api_url', '') && variable_get('activecampaign_api_key', '')) {
    return TRUE;
  }
  else {
    drupal_set_message(t('The ActiveCampaign API module is not configured. You can do so at !link.',
      array('!link' => '<em>' . l(t('admin/config/services/activecampaign'), 'admin/config/services/activecampaign') . '</em>')), 'error');
    return FALSE;
  }
}

/**
 * Helper Function, To check whether ActiveCampaign account has connected.
 *
 * @param string $perm
 *   The Allowed permission.
 *
 * @return bool
 *   TRUE, if ActiveCampaign account has connected and user has permission.
 */
function activecampaign_config_access_callback($perm) {
  if (activecampaign_test_api_credentials() && user_access($perm)) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Helper Function, To test the API credentials.
 *
 * @return bool
 *   TRUE, if ActiveCampaign Account is Valid.
 */
function activecampaign_test_api_credentials() {

  // Reset the centrally stored object to update the new API credentials.
  drupal_static_reset('activecampaign_client');

  // Get the ActiveCampaign object.
  $_ac_account = activecampaign_get_client();
  if (!(bool) $_ac_account->credentials_test()) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Update a contact from a Drupal User. If no contact exists, create a contact from a Drupal User
 *
 * @param StdClass $account
 *   A Drupal User.
 * @param array $contact
 *   ActiveCampaign contact data.
 *
 * @return stdClass
 *   return the User object.
 *
 */
function activecampaign_user_to_contact($account, $contact = array()) {
  // If the user already has a contact, update it
  if (!empty($account->field_activecampaign_id[LANGUAGE_NONE][0]['value'])) {
	$activecampaign_id = $account->field_activecampaign_id[LANGUAGE_NONE][0]['value'];

	$contact = activecampaign_contact_build_fields($account, $contact);
    drupal_alter('activecampaign_contact', $contact, $account);
    $value = activecampaign_contact_sync($contact);

    if ($value->subscriber_id != $account->field_activecampaign_id[LANGUAGE_NONE][0]['value']) {
      user_save($account, array($account->field_activecampaign_id[LANGUAGE_NONE][0]['value'] = $value->subscriber_id));
	}

    if (module_exists('activecampaign_rules')) {
      rules_invoke_event("activecampaign_contact_sync_event", $account);
    }
	return $account;
  }
  // Else, create a new contact for the user if $auto_create = TRUE
  elseif ($auto_create = TRUE) {
    $contact = activecampaign_contact_build_fields($account, $contact);
    drupal_alter('activecampaign_contact', $contact, $account);
    $value = activecampaign_contact_sync($contact);

    if ($value) {
      user_save($account, array($account->field_activecampaign_id[LANGUAGE_NONE][0]['value'] = $value->subscriber_id));

      if (module_exists('activecampaign_rules')) {
        rules_invoke_event("activecampaign_contact_add_event", $account);
      }
    }
    return $account;
  }
}

/**
 * This is a helper function to retrive a ActiveCampaign ID from
 * a user.  If the user does not have an ID then create one.
 *
 * @param StdClass $account
 *   A Drupal User.
 * @param bool $auto_create
 *   Create the Contact if user does not have an id.
 * @return int|bool
 *   Returns the ActiveCampaign Contact Id, or FALSE if none exists.
 */
function activecampaign_contact_id($account, $auto_create = TRUE) {
  // If our required field is not on the user object, then load the full object.
  if (!isset($account->field_activecampaign_id[LANGUAGE_NONE][0]['value'])) {
    $account = user_load($account->uid);
  }
  if (!empty($account->field_activecampaign_id[LANGUAGE_NONE][0]['value'])) {
    return $account->field_activecampaign_id[LANGUAGE_NONE][0]['value'];
  }
  elseif (empty($account->field_activecampaign_id[LANGUAGE_NONE][0]['value']) && $auto_create) {
    $account = activecampaign_user_to_contact($account);
    return $account->field_activecampaign_id[LANGUAGE_NONE][0]['value'];
  }
  else {
    return FALSE;
  }
}

/**
 * SERVICE INVOCATIONS
 */

/**
 * Helper wrapper to add a contact
 *
 * @param mixed $contact
 * @return int|bool
 *   Returns the ActiveCampaign Contact Id, or FALSE if none exists.
 */

/**
 * Helper function to load ActiveCampaign Account
 *
 * @return int|bool
 *   Returns the ActiveCampaign Account Information, or FALSE if none exists.
 */
function activecampaign_account_load() {
  $ac = activecampaign_get_client();
  $ret = $ac->api("account/view");
  return $ret;
}

/**
 * Helper wrapper to sync a contact
 *
 * @param int $contact
 *   Returns TRUE when synced.
 */
function activecampaign_contact_sync($contact) {
  drupal_set_message(t('ActiveCampaign sync start.'), 'status');
  $ac = activecampaign_get_client();
  $ret = $ac->api("contact/sync", $contact);
  if (!(int)$ret->success) {
    // request failed
    watchdog('ActiveCampaign', '<p>Syncing contact failed. Error returned: %error</p>', array('%error' => $ret->error), WATCHDOG_NOTICE, $link = NULL);
    exit();
  } else {
    // successful request
    $contact_id = (int)$ret->subscriber_id;
    watchdog('ActiveCampaign', '<p>Contact synced successfully (ID %contactid)</p><p>Fields synced:</p><pre>%contact</pre>', array('%contactid' => $contact_id, '%contact' => print_r($contact, TRUE)), WATCHDOG_NOTICE, $link = NULL);
  }
  return $ret;
}

/**
 * Helper function to build all fields for a contact
 *
 * @param int $account
 *   Returns the $contact ready to sync with ActiveCampaign.
 */
function activecampaign_contact_build_fields($account, $contact) {
  $fields = variable_get('activecampaign_field_mapping', '');
  if (!isset($fields)) {
    // request failed
    drupal_set_message('ActiveCampaign field mapping is incomplete.', 'error');
    watchdog('ActiveCampaign', '<p>Field mapping is incomplete:</p><pre>%fields</pre>', array('%fields' => print_r($fields, TRUE)), WATCHDOG_WARNING, $link = 'admin/config/services/activecampaign/fields');
    exit();
  }
  foreach ($fields as $key => $field) {
    $key = str_replace('activecampaign_', '', $key);
    if ($field != 'NOT USED' && is_numeric($key)) {
      if (isset($account->{$field}['und'][0]['value'])) {
        $contact['field['.$key.']'] = $account->{$field}['und'][0]['value'];
      }
      elseif (!empty($account->$field)) {
        $contact['field['.$key.']'] = $account->$field;
      }
    }
    elseif ($field != 'NOT USED' && !is_numeric($key)) {
      if (isset($account->{$field}['und'][0]['value'])) {
        $contact[$key] = $account->{$field}['und'][0]['value'];
      }
      elseif (!empty($account->$field)) {
        $contact[$key] = $account->$field;
      }
    }
  }
  return $contact;
}

/**
 * Helper wrapper to delete a contact
 *
 * @param int $activecampaign_id
 *   Returns TRUE when deleted.
 */
function activecampaign_contact_delete($activecampaign_id) {
  $ac = activecampaign_get_client();
  $ret = $ac->api("contact/delete", $activecampaign_id);
  if (!(int)$ret->success) {
    // request failed
    watchdog('ActiveCampaign', '<p>Deleting contact failed. Error returned: %error</p>', array('%error' => $ret->error), WATCHDOG_NOTICE, $link = NULL);
    exit();
  } else {
    // successful request
    $contact_id = (int)$ret->subscriber_id;
    watchdog('ActiveCampaign', '<p>Contact deleted successfully (ID %contactid)</p>', array('%contactid' => $contact_id), WATCHDOG_NOTICE, $link = NULL);
  }
  return $ret;
}

/**
 * Helper function to load an ActiveCampaign Contact
 *
 * @param int $activecampaign_id
 * @return int|bool
 *   Returns the ActiveCampaign Contact Id, or FALSE if none exists.
 */
function activecampaign_contact_load($activecampaign_id) {
  $ac = activecampaign_get_client();
  $ret = $ac->api("contact/view?id=".$activecampaign_id);
  return $ret;
}

/**
 * Helper function to load an ActiveCampaign Contact
 *
 * @param int $activecampaign_id
 * @return int|bool
 *   Returns the ActiveCampaign Contact Id, or FALSE if none exists.
 */
function activecampaign_contact_load_email($email) {
  $ac = activecampaign_get_client();
  $ret = $ac->api("contact/view?email=".$email);
  if (!$ret->success) {
    // request failed
    watchdog('ActiveCampaign', '<p>Getting the contact failed. Error returned: %error</p>', array('%error' => $ret->error), WATCHDOG_NOTICE, $link = NULL);
  } else {
    // successful request
    watchdog('ActiveCampaign', '<p>Output:</p><pre>%success</p>', array('%success' => $ret->success), WATCHDOG_NOTICE, $link = NULL);
  }
  return $ret;
}

/**
 * Get ActiveCampaign Lists.
 */
function activecampaign_get_lists() {
  $ac = activecampaign_get_client();
  $ret = $ac->api('list/list?ids=all&full=0&global_fields=1');
  $lists = array();
  if ($ret->success === 1) {
    foreach ($ret as $value) {
      if (is_object($value)) {
        $lists[] = $value;
      }
    }
  }

  return $lists;
}

/**
 * Filter ActiveCampaign Lists.
 */
function activecampaign_get_lists_filtered() {
  $lists = activecampaign_get_lists();
  $lists_filtered = array();
  foreach ($lists as $list) {
    $lists_filtered[$list->id] = $list->name;
  }

  return $lists_filtered;
}

/**
 * Get ActiveCampaign Tags.
 */
function activecampaign_get_tags() {
  $ac = activecampaign_get_client();
  $ret = $ac->api('tags/list');
  $ret = json_decode($ret);
  $tags = [];
  foreach ($ret as $value) {
    $tags[] = $value;
  }

  return $tags;
}

/**
 * Filter ActiveCampaign Tags.
 */
function activecampaign_get_tags_filtered() {
  $tags = activecampaign_get_tags();
  $tags_filtered = array();
  foreach ($tags as $tag) {
    $tags_filtered[$tag->id] = $tag->name;
  }

  return $tags_filtered;
}

/**
 * Get ActiveCampaign Contact Fields.
 */
function activecampaign_get_fields() {
  $ac = activecampaign_get_client();
  $ret = $ac->api('list/field/view?ids=all');
  return $ret;
}
